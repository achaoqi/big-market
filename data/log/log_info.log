24-08-06.09:34:37.176 [main            ] INFO  Application            - Starting Application using Java 1.8.0_332 on chaoqi with PID 42104 (E:\workspace\study_project\big-market\big-market-app\target\classes started by lenovo in E:\workspace\study_project\big-market)
24-08-06.09:34:37.178 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-08-06.09:34:39.027 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-08-06.09:34:39.032 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-08-06.09:34:39.134 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 72 ms. Found 0 Redis repository interfaces.
24-08-06.09:34:40.343 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-08-06.09:34:40.344 [main            ] INFO  AprLifecycleListener   - Loaded Apache Tomcat Native library [1.2.32] using APR version [1.7.0].
24-08-06.09:34:40.344 [main            ] INFO  AprLifecycleListener   - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
24-08-06.09:34:40.344 [main            ] INFO  AprLifecycleListener   - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
24-08-06.09:34:40.349 [main            ] INFO  AprLifecycleListener   - OpenSSL successfully initialized [OpenSSL 1.1.1n  15 Mar 2022]
24-08-06.09:34:40.361 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-08-06.09:34:40.361 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-08-06.09:34:40.361 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-08-06.09:34:40.588 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-08-06.09:34:40.588 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3310 ms
24-08-06.09:34:41.246 [main            ] INFO  Version                - Redisson 3.23.4
24-08-06.09:34:43.093 [redisson-netty-2-22] INFO  MasterConnectionPool   - 10 connections initialized for 192.168.245.135/192.168.245.135:6379
24-08-06.09:34:43.107 [redisson-netty-2-23] INFO  MasterPubSubConnectionPool - 1 connections initialized for 192.168.245.135/192.168.245.135:6379
24-08-06.09:34:45.350 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-08-06.09:34:45.491 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-08-06.09:34:45.508 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-08-06.09:34:45.510 [main            ] INFO  CachingConnectionFactory - Attempting to connect to: [192.168.245.135:5672]
24-08-06.09:34:45.560 [main            ] INFO  CachingConnectionFactory - Created new connection: rabbitConnectionFactory#59c43561:0/SimpleConnection@25d0b918 [delegate=amqp://guest@192.168.245.135:5672/, localPort= 57796]
24-08-06.09:34:45.665 [main            ] INFO  Application            - Started Application in 9.347 seconds (JVM running for 12.318)
24-08-06.09:34:47.196 [RMI TCP Connection(2)-192.168.245.1] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-08-06.09:34:47.196 [RMI TCP Connection(2)-192.168.245.1] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-08-06.09:34:47.197 [RMI TCP Connection(2)-192.168.245.1] INFO  DispatcherServlet      - Completed initialization in 1 ms
24-08-06.09:34:47.202 [RMI TCP Connection(1)-192.168.245.1] INFO  HikariDataSource       - Retail_HikariCP - Starting...
24-08-06.09:34:47.556 [RMI TCP Connection(1)-192.168.245.1] INFO  HikariDataSource       - Retail_HikariCP - Start completed.
24-08-06.09:34:47.584 [RMI TCP Connection(1)-192.168.245.1] INFO  HikariDataSource       - Retail_HikariCP - Starting...
24-08-06.09:34:47.613 [RMI TCP Connection(1)-192.168.245.1] INFO  HikariDataSource       - Retail_HikariCP - Start completed.
24-08-06.09:34:50.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:34:50.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:34:55.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:34:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:34:56.417 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动抽奖 userId:xiaofuge activityId:100301
24-08-06.09:34:56.518 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动抽奖,创建订单 userId:xiaofuge activityId:100301 orderId:060743804005
24-08-06.09:34:56.520 [http-nio-8091-exec-2] INFO  HikariDataSource       - Retail_HikariCP - Starting...
24-08-06.09:34:56.549 [http-nio-8091-exec-2] INFO  HikariDataSource       - Retail_HikariCP - Start completed.
24-08-06.09:34:56.568 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId:xiaofuge,strategyId:100006,awardId:108
24-08-06.09:34:56.571 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链xiaofuge 100006 108 rule_default
24-08-06.09:34:56.611 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:xiaofuge awardId:108 strategyId:100006 ruleValue:2
24-08-06.09:35:11.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:11.042 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁[放行] userId:xiaofuge strategyId:100006 awardId:108 raffleCount:2 userRaffleCount:8
24-08-06.09:35:11.047 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎 【规则树】 treeId:tree_lock_2,node:rule_lock,code:0000
24-08-06.09:35:11.047 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:11.048 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:xiaofuge awardId:108 strategyId:100006
24-08-06.09:35:11.108 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎 【规则树】 treeId:tree_lock_2,node:rule_stock,code:0001
24-08-06.09:35:11.108 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树xiaofuge 100006 108 
24-08-06.09:35:11.448 [pool-3-thread-7 ] INFO  EventPublisher         - 发送MQ消息 topic:send_award,message:{"data":{"awardId":108,"awardTitle":"1等奖","userId":"xiaofuge"},"id":"42234387000","timestamp":1722908111136}
24-08-06.09:35:11.463 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息topic:send_award message:{"data":{"awardId":108,"awardTitle":"1等奖","userId":"xiaofuge"},"id":"42234387000","timestamp":1722908111136}
24-08-06.09:35:15.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-08-06.09:35:15.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:20.004 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:25.009 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:30.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:35.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:40.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:45.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:45.018 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:50.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:35:55.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:35:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:00.004 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:05.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:10.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:10.017 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:15.010 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:20.009 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:25.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:25.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:30.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:30.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:35.007 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:40.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:40.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:45.017 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:50.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:36:55.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:36:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:00.015 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:00.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:05.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:05.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:10.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:15.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:15.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:20.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:25.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:30.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:35.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:35.016 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:40.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:45.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:50.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:37:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:37:55.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:38:00.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:38:00.019 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:38:05.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:38:05.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:38:10.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:38:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:38:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:38:15.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:38:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，防止产生竞争】
24-08-06.09:38:20.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku缓存，【延迟队列获取】，降低对数据库的更新频次，不产生竞争
24-08-06.09:38:20.485 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-08-06.09:38:20.488 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-08-06.09:38:20.787 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
